import java.time.LocalDate
import java.time.LocalTime

plugins {
    id "idea"
    id "java"
    id "jacoco"
    id "application"
    id "org.flywaydb.flyway" version "4.2.0"
    id "org.springframework.boot" version "1.5.4.RELEASE"
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

repositories {
    jcenter()
}

dependencies {
    compile "org.projectlombok:lombok:1.16.16"
    compile 'com.trevorgowing:url-string-builder:1.1.0'

    compile "org.flywaydb:flyway-core:4.2.0"
    compile "mysql:mysql-connector-java:6.0.6"
    compile "org.hibernate:hibernate-core:5.2.10.Final"

    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.0.pr3"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.0.pr3"

    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"

    compile "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-hateoas"
    compile "org.springframework.boot:spring-boot-starter-actuator"

    testCompile "io.rest-assured:rest-assured:3.0.2"
    testCompile "io.rest-assured:spring-mock-mvc:3.0.2"
    testCompile "org.springframework.boot:spring-boot-starter-test"

    testRuntime "com.h2database:h2:1.4.194"
}

springBoot  {
    buildInfo()
}

flyway {
    baselineVersion = "2017.03.19.18.14.33.897"
    outOfOrder = true
}

jar {
    baseName = 'projectlog'
    version =  '0.0.1'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "com.trevorgowing.projectlog.Application"

/**
 * Create a flyway sql migration in the default location, with a version of timestamp now and default description.
 */
task createSqlMigration {
    doLast {
        String version = LocalDate.now().toString().replace('-', '.').concat('.')
                .concat(LocalTime.now().toString().replace(':', '.'))
        String fileName = 'V'.concat(version).concat('__').concat("description").concat(".sql")
        String filePath = "src/main/resources/db/migration/".concat(fileName)
        new File(filePath).createNewFile() ? println(filePath.concat(" migration created successfully"))
                : println("Failed to create migration ".concat(filePath))

    }
}